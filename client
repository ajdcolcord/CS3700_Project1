#!/usr/bin/env python

# Austin Colcord and Nick Scheuring
import socket, sys, ssl

# set global flag to indicate if the socket is closed or not
closed_flag = False


def calculate(first, second, operator):
    """
    This function calculates the result based on the
    two number inputs first and second, and the operator

    :param first: Nat - the first number
    :param second: Nat - the second number
    :param operator: Str - the operator string
    :return:
    """
    result = ""
    if operator == "+":
            result = int(first) + int(second)
    elif operator == "-":
        result = int(first) - int(second)
    elif operator == "/":
        result = int(first) / int(second)
    elif operator == "*":
        result = int(first) * int(second)
    else:
        print "Did not recognize: " + operator

    return result


def parse_message(message, sock):
    """
    This function parses the message based on the message type

    :param message: Str - the message to be parsed
    :param sock: the socket to be passed in
    :return:
    """
    message_arr = str(message).split()
    if message_arr[1] == 'STATUS':
        first = message_arr[2]
        operator = message_arr[3]
        second = message_arr[4]

        result = calculate(first, second, operator)

        sock.send("cs3700spring2016 " + str(result) + '\n')
    if message_arr[1] == 'BYE':
        sock.close()
        global closed_flag
        closed_flag = True


def main():
    """
    This is the main function, runs all necessary steps
    to open the socket and send and receive messages
    :return: Void (no return)
    """
    # if not enough arguments are provided, print an error and exit
    if len(sys.argv) < 3:
        print "Required Parameters Missing"
        sys.exit()

    # get arguments from console
    # if only host and neuid are provided
    elif len(sys.argv) == 3:
        port = 27993
        sflag = None
        hostname = str(sys.argv[1])
        neuid = str(sys.argv[2])

    # if port or sflag are provided
    elif len(sys.argv) == 4:
        if sys.argv[1] == '-s':
            port = 27993
            sflag = True
        else:
            port = int(sys.argv[1])
            sflag = None

        hostname = str(sys.argv[2])
        neuid = str(sys.argv[3])

    # if port and sflag are provided
    elif len(sys.argv) == 5:

        port = int(sys.argv[1])
        sflag = str(sys.argv[2])
        if sflag != '-s':
            sflag = None
        hostname = str(sys.argv[3])
        neuid = str(sys.argv[4])

    # create the socket
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # connect the socket to the host
    try:
        s.connect((hostname, port))
    except socket.error:
        print "Failed To Connect Socket to Host"
        sys.exit(1)

    # if ssl flag is there, create the ssl connection
    if sflag:
        sock = s
        #ssl.wrap_socket(s, cert_reqs=ssl.CERT_NONE)
        print "SSL Not Supported"
        sys.exit(1)
    else:
        sock = s

    # send the hello message
    try:
        sock.send("cs3700spring2016 HELLO " + neuid + "\n")
    except socket.error:
        print "Failed To Send Hello Message"

    # continuously receive and send messages
    while 1:
        global closed_flag
        if closed_flag:
            break
        received = sock.recv(1024)
        if 'BYE' in received:
            print received.split()[2]
        parse_message(received, sock)


main()
